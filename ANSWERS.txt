Part 1 - Hill Climbing algorithm:

Both P1 and P2 use the walk.py python script to detect the peaks within the trace files. walk.py is a python implementation of the hill climbing algorithm. It works as follows:
0. '__main__' code section - at bottom - Grab the passed-in filename, which is expected to be the only argument, and pass it to the run function. This also sets the average acceleration threshold and acceleration direction based on which trace file was passed in.
1. run - open the csv file, skip the headers row, then run the rest of the steps
2. smoothValues - loop over the values of the trace file, creating and returning a new list containing the average of every 300 ms window. Note that which acceleration direction (x,y,z) to use is based on which file was passed-in.
3. findPeaks - Do the hill climbing algorithm. Loop through the values, keeping a local max. If the value found is lower than the local max, look ahead one value and compare that to the local max as well. If both are lower than the local max, save it as a peak and set local max to 0 (assuming local max is greater than the value threshold).
4. removeFalsePositives - If there are multiple local peaks within 300 ms of each other, only keep the larger one since that is too short of time for a step
5. printResults - Print each peak and the total number of steps

The only changes made to make the walk.py code work for the pocket data was to change the acceleration threshold required to find a peak and to change the acceleration direction used. The movement was much less dramatic while in the users pocket, so the threshold had to be set at a lower value. Also, the phone was pointed in a different direction while in the users pocket, up-and-down, so the Z acceleration was used instead of Y. The python script set these values automatically based on the name of the passed-in csv file.



Part 2 - Heading Detection:
6.
a. How many turns does the user take during the walk? How do you determine if
there is a turn using the trace?
To find turns using the trace, first you look for dramatic changes to the heading values (using a scatterplot is highly recommended). Next you compare those times to the changes in acceleration (in the Y and Z directions in this case). If there is an acceleration change that lines up with a heading change, you know that the user turned at that time. 
b. List the exact times when the turn event happen.
21 seconds (21358 ms is first indication of turn) and 39 seconds (39398 ms).


7.
a. Are there any instances of magnetic interference in the trace?
Yes
b. If so, how many?
2
c. How do you figure out that there is magnetic interference using the trace?
There are 2 times where the heading direction changes and then quickly changes back to what it was previously. At first glance, it appears that the user turned and then turned back, but the accelerometer data at these times does not show any movement of that sort. Because of a. the changed heading, b. the fact that it changes back to where it was before, and c. the fact that this movement is not evident in the accelerometer data, it is safe to conclude that these instances are magnetic interference.
d. List the exact times when the magnetic interference events happen.
The first event starts with the heading dropping for a brief period at 12965 ms, followed by going up dramatically at 13398 ms. It stays there (with some fluctuation) until returning to around where it was previously at 17097 ms.
The second event jumps up from the heading it was at, though not as quickly, starting at 30219 ms. It drops back down to where it was before at around 32037 ms.